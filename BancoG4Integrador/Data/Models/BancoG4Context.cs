// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Data.Models;

public partial class BancoG4Context : DbContext
{
    public BancoG4Context(DbContextOptions<BancoG4Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Banco> Banco { get; set; }

    public virtual DbSet<Cliente> Cliente { get; set; }

    public virtual DbSet<ClienteXcuenta> ClienteXcuenta { get; set; }

    public virtual DbSet<Cuenta> Cuenta { get; set; }

    public virtual DbSet<Direccion> Direccion { get; set; }

    public virtual DbSet<Localidad> Localidad { get; set; }

    public virtual DbSet<Pais> Pais { get; set; }

    public virtual DbSet<Provincia> Provincia { get; set; }

    public virtual DbSet<TipoCuenta> TipoCuenta { get; set; }

    public virtual DbSet<TipoTransaccion> TipoTransaccion { get; set; }

    public virtual DbSet<Transaccion> Transaccion { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Banco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Banco_pkey");

            entity.Property(e => e.Id)
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Cliente_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Alta).HasColumnName("alta");
            entity.Property(e => e.Cuil)
                .ValueGeneratedOnAdd()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("cuil");
            entity.Property(e => e.DireccionId).HasColumnName("direccion_id");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasColumnName("razon_social");

            entity.HasOne(d => d.Direccion).WithMany(p => p.Cliente)
                .HasForeignKey(d => d.DireccionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("direccion_id");
        });

        modelBuilder.Entity<ClienteXcuenta>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("ClienteXCuenta_pkey");

            entity.ToTable("ClienteXCuenta");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Alta).HasColumnName("alta");
            entity.Property(e => e.ClienteId)
                .ValueGeneratedOnAdd()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("cliente_id");
            entity.Property(e => e.CuentaId)
                .ValueGeneratedOnAdd()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("cuenta_id");
            entity.Property(e => e.Rol)
                .IsRequired()
                .HasColumnName("rol");

            entity.HasOne(d => d.Cliente).WithMany(p => p.ClienteXcuenta)
                .HasForeignKey(d => d.ClienteId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("cliente_id");

            entity.HasOne(d => d.Cuenta).WithMany(p => p.ClienteXcuenta)
                .HasForeignKey(d => d.CuentaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("cuenta_id");
        });

        modelBuilder.Entity<Cuenta>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Cuenta_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.BancoId)
                .ValueGeneratedOnAdd()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("banco_id");
            entity.Property(e => e.Cbu).HasColumnName("cbu");
            entity.Property(e => e.NumeroCuenta).HasColumnName("numero_cuenta");
            entity.Property(e => e.TipoCuentaId)
                .ValueGeneratedOnAdd()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("tipoCuenta_id");

            entity.HasOne(d => d.Banco).WithMany(p => p.Cuenta)
                .HasForeignKey(d => d.BancoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("banco_id");

            entity.HasOne(d => d.TipoCuenta).WithMany(p => p.Cuenta)
                .HasForeignKey(d => d.TipoCuentaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tipoCuenta_id");
        });

        modelBuilder.Entity<Direccion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Direccion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasColumnName("calle");
            entity.Property(e => e.Departamento)
                .IsRequired()
                .HasColumnName("departamento");
            entity.Property(e => e.Idlocalidad).HasColumnName("idlocalidad");
            entity.Property(e => e.Numero).HasColumnName("numero");

            entity.HasOne(d => d.IdlocalidadNavigation).WithMany(p => p.Direccion)
                .HasForeignKey(d => d.Idlocalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("localidad_id");
        });

        modelBuilder.Entity<Localidad>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Localidad_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("id");
            entity.Property(e => e.Cp).HasColumnName("cp");
            entity.Property(e => e.IdProvincia).HasColumnName("idProvincia");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Localidad)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("idProvincia");
        });

        modelBuilder.Entity<Pais>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Pais_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Provincia_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.IdPais).HasColumnName("idPais");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdPaisNavigation).WithMany(p => p.Provincia)
                .HasForeignKey(d => d.IdPais)
                .HasConstraintName("idPais");
        });

        modelBuilder.Entity<TipoCuenta>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("TipoCuenta_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Alta).HasColumnName("alta");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<TipoTransaccion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("TipoTransaccion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.Nombre).HasColumnName("nombre");
        });

        modelBuilder.Entity<Transaccion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("Transaccion_pkey");

            entity.Property(e => e.Id)
                .UseIdentityAlwaysColumn()
                .HasIdentityOptions(null, null, null, 9999L, null, null)
                .HasColumnName("ID");
            entity.Property(e => e.CuentaDestinoId).HasColumnName("cuentaDestino_id");
            entity.Property(e => e.CuentaOrigenId).HasColumnName("cuentaOrigen_id");
            entity.Property(e => e.Fecha).HasColumnName("fecha");
            entity.Property(e => e.Monto).HasColumnName("monto");
            entity.Property(e => e.NumeroOperacion).HasColumnName("numero_operacion");
            entity.Property(e => e.TipoTransaccionId).HasColumnName("tipoTransaccion_id");

            entity.HasOne(d => d.CuentaDestino).WithMany(p => p.TransaccionCuentaDestino)
                .HasForeignKey(d => d.CuentaDestinoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("cuentaDestino_id");

            entity.HasOne(d => d.CuentaOrigen).WithMany(p => p.TransaccionCuentaOrigen)
                .HasForeignKey(d => d.CuentaOrigenId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("cuentaOrigen_id");

            entity.HasOne(d => d.TipoTransaccion).WithMany(p => p.Transaccion)
                .HasForeignKey(d => d.TipoTransaccionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("tipoTransaccion_id");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}